name: Docker Build y Despliegue

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # El Job de compilaci√≥n debe haber terminado exitosamente
  docker_build:
    name: Generar Contenedor y Publicar
    runs-on: ubuntu-latest
    needs: build # üëà Se asegura de que el Job 'build' de node.js.yml haya pasado
    
    permissions:
      contents: read
      packages: write # Permiso necesario para publicar en GitHub Packages/Registry
      
    steps:
      - name: Descargar C√≥digo Fuente
        uses: actions/checkout@v4
        
      # Nota: Aqu√≠ deber√≠as considerar descargar los artefactos del Job 'build' si son necesarios
      # - name: Descargar Artefactos del Build
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-artifacts-22.x # Ajusta para la versi√≥n que quieras usar para el deploy
      
      # Configurar Docker (Configurar Docker)
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Autenticar a GitHub Registry
      - name: Autenticar a GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generar metadatos de contenedor
      - name: Generar Metadata Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha,format=short
            
      # Construir y versionar imagen
      - name: Construir y Versionar Imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }} # Solo hace push en 'push' a main
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}